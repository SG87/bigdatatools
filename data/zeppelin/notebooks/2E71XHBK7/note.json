{
  "paragraphs": [
    {
      "text": "%md\n\u003ccenter\u003e\n\u003cimg src\u003d\"http://spark-mooc.github.io/web-assets/images/ta_Spark-logo-small.png\" width\u003d\"200\" height\u003d\"200\" /\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cimg src\u003d\"http://spark-mooc.github.io/web-assets/images/python-logo-master-v3-TM-flattened_small.png\" width\u003d\"200\" height\u003d\"200\" /\u003e\n\n\u003cimg src\u003d\"https://www.vectorlogo.zone/logos/apache_kafka/apache_kafka-ar21.svg\" width\u003d\"200\" height\u003d\"200\" /\u003e \n\n\u003cimg src\u003d\"https://www.teaminformatics.com/wp-content/uploads/2017/05/elasticsearch-logo-1200x625.png\" width\u003d\"200\" height\u003d\"200\" /\u003e\n\n\u003cimg src\u003d\"https://oliverveits.files.wordpress.com/2016/11/kibana-logo-color-v.png\" width\u003d\"200\" height\u003d\"200\" /\u003e\n\u003c/center\u003e\n\n\n# Group Assignment Big Data Tools 2\n\nIn this assignment you are going to build on the results of the individual assignment and give the Belgian second hand car dealer some more advice.\n\nThe car dealer has decided he wants to focus his activities on **German cars** (Audi, BMW, Mercedes, Opel, Porsche, and Volkswagen (VW)). He has heard rumours that it is possible analyze _tweets_ of cars with **streaming technology** so he asks you to do this for him. Additionally he wants to build a website with a **search engine**. He asks you to demo some searching capabilities with **ElasticSearch**.\n\nCan you help the Belgian car dealer by answering his questions?\n\n\n\u003ccenter\u003e\u003cimg src\u003d\"https://www.ocbc.com/assets/images/uploads/loans/inside_carloan/autofinancing_used_car.png\"\u003e\u003c/center\u003e",
      "user": "anonymous",
      "dateUpdated": "2019-04-06 13:34:32.507",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ccenter\u003e\n\u003cimg src\u003d\"http://spark-mooc.github.io/web-assets/images/ta_Spark-logo-small.png\" width\u003d\"200\" height\u003d\"200\" /\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cimg src\u003d\"http://spark-mooc.github.io/web-assets/images/python-logo-master-v3-TM-flattened_small.png\" width\u003d\"200\" height\u003d\"200\" /\u003e\n\n\u003cimg src\u003d\"https://www.vectorlogo.zone/logos/apache_kafka/apache_kafka-ar21.svg\" width\u003d\"200\" height\u003d\"200\" /\u003e \n\n\u003cimg src\u003d\"https://www.teaminformatics.com/wp-content/uploads/2017/05/elasticsearch-logo-1200x625.png\" width\u003d\"200\" height\u003d\"200\" /\u003e\n\n\u003cimg src\u003d\"https://oliverveits.files.wordpress.com/2016/11/kibana-logo-color-v.png\" width\u003d\"200\" height\u003d\"200\" /\u003e\n\u003c/center\u003e\n\u003ch1\u003eGroup Assignment Big Data Tools 2\u003c/h1\u003e\n\u003cp\u003eIn this assignment you are going to build on the results of the individual assignment and give the Belgian second hand car dealer some more advice.\u003c/p\u003e\n\u003cp\u003eThe car dealer has decided he wants to focus his activities on \u003cstrong\u003eGerman cars\u003c/strong\u003e (Audi, BMW, Mercedes, Opel, Porsche, and Volkswagen (VW)). He has heard rumours that it is possible analyze \u003cem\u003etweets\u003c/em\u003e of cars with \u003cstrong\u003estreaming technology\u003c/strong\u003e so he asks you to do this for him. Additionally he wants to build a website with a \u003cstrong\u003esearch engine\u003c/strong\u003e. He asks you to demo some searching capabilities with \u003cstrong\u003eElasticSearch\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eCan you help the Belgian car dealer by answering his questions?\u003c/p\u003e\n\u003ccenter\u003e\u003cimg src\u003d\"https://www.ocbc.com/assets/images/uploads/loans/inside_carloan/autofinancing_used_car.png\"\u003e\u003c/center\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543555_-1975592927",
      "id": "20171107-075538_110666415",
      "dateCreated": "2019-03-30 14:35:43.555",
      "dateStarted": "2019-04-06 13:34:32.508",
      "dateFinished": "2019-04-06 13:34:32.569",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Practical\n\nGrading percentage: 40%\n\nDue Date: 24/05/2019\n\nSend assignment to: s.geuens@ieseg.fr\n\nAccepted formats: Exported Zeppelin notebook (.json)\n\nIf you have finished the assignment, save this notebook pressing the \"Export this note\" icon on top in the middle of this page. The notebook will be saved as a .json file on your local machine. Rename this file as **lastname1_firstname1_\u0026_lastname2_firstname2_\u0026_....json**. and send it to s.geuens@ieseg.fr.\n\nYou can include the ElasticSearch code into the Zeppelin notebook using the **%elasticsearch** tag. It is not necessary to develop the code in the notebook. You can write your code in Kibana and afterwards copy it into the Zeppelin notebook.\n",
      "user": "anonymous",
      "dateUpdated": "2019-04-06 13:52:34.847",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003ePractical\u003c/h2\u003e\n\u003cp\u003eGrading percentage: 40%\u003c/p\u003e\n\u003cp\u003eDue Date: 24/05/2019\u003c/p\u003e\n\u003cp\u003eSend assignment to: \u003ca href\u003d\"mailto:\u0026#115;.\u0026#103;\u0026#x65;\u0026#x75;\u0026#x65;\u0026#x6e;\u0026#115;\u0026#x40;\u0026#x69;e\u0026#115;\u0026#x65;\u0026#103;.\u0026#102;\u0026#114;\"\u003e\u0026#115;.\u0026#103;\u0026#x65;\u0026#x75;\u0026#x65;\u0026#x6e;\u0026#115;\u0026#x40;\u0026#x69;e\u0026#115;\u0026#x65;\u0026#103;.\u0026#102;\u0026#114;\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eAccepted formats: Exported Zeppelin notebook (.json)\u003c/p\u003e\n\u003cp\u003eIf you have finished the assignment, save this notebook pressing the \u0026ldquo;Export this note\u0026rdquo; icon on top in the middle of this page. The notebook will be saved as a .json file on your local machine. Rename this file as \u003cstrong\u003elastname1_firstname1_\u0026amp;_lastname2_firstname2_\u0026amp;_\u0026hellip;.json\u003c/strong\u003e. and send it to \u003ca href\u003d\"mailto:\u0026#115;.\u0026#103;e\u0026#x75;\u0026#101;\u0026#x6e;\u0026#x73;\u0026#64;\u0026#105;e\u0026#x73;\u0026#x65;g\u0026#46;\u0026#x66;\u0026#x72;\"\u003e\u0026#115;.\u0026#103;e\u0026#x75;\u0026#101;\u0026#x6e;\u0026#x73;\u0026#64;\u0026#105;e\u0026#x73;\u0026#x65;g\u0026#46;\u0026#x66;\u0026#x72;\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou can include the ElasticSearch code into the Zeppelin notebook using the \u003cstrong\u003e%elasticsearch\u003c/strong\u003e tag. It is not necessary to develop the code in the notebook. You can write your code in Kibana and afterwards copy it into the Zeppelin notebook.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543565_1066033227",
      "id": "20171107-075935_1998451982",
      "dateCreated": "2019-03-30 14:35:43.565",
      "dateStarted": "2019-04-06 13:52:34.847",
      "dateFinished": "2019-04-06 13:52:34.909",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## The assignment\n\n**The assignment consists of four major parts:**\n- Part 1: Putting the base file into HDFS\n- Part 2: Reading the file in Spark from HDFS\n- Part 3: Doing transformations and basic actions in Spark\n- Part 4: Calculating ML models in Spark\n- Part 5: Theoretical questions\n\nThis notebook is divided into these five parts. At the start of each part, an explanation of the expectations is given.\n\nThe assignment is grades based on logic and effort, not on final results. If you make mistakes try to complete the steps that follow, even if you cannot complete them correctly anymore. Showing your understanding of what you need to do, is as important as the final results. At the end of each block a test paragraph is included. This test paragraph already gives you an indication whether your answer is right or wrong.\n\n\u003e As mentioned, grades are not only give based on final results. Try to be as complete as possible and make notes using and adding comments (#) or %md cells.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.566",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eThe assignment\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eThe assignment consists of four major parts:\u003c/strong\u003e\u003cbr/\u003e- Part 1: Putting the base file into HDFS\u003cbr/\u003e- Part 2: Reading the file in Spark from HDFS\u003cbr/\u003e- Part 3: Doing transformations and basic actions in Spark\u003cbr/\u003e- Part 4: Calculating ML models in Spark\u003cbr/\u003e- Part 5: Theoretical questions\u003c/p\u003e\n\u003cp\u003eThis notebook is divided into these five parts. At the start of each part, an explanation of the expectations is given.\u003c/p\u003e\n\u003cp\u003eThe assignment is grades based on logic and effort, not on final results. If you make mistakes try to complete the steps that follow, even if you cannot complete them correctly anymore. Showing your understanding of what you need to do, is as important as the final results. At the end of each block a test paragraph is included. This test paragraph already gives you an indication whether your answer is right or wrong.\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eAs mentioned, grades are not only give based on final results. Try to be as complete as possible and make notes using and adding comments (#) or %md cells.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543566_-1775523354",
      "id": "20171107-082514_1745873002",
      "dateCreated": "2019-03-30 14:35:43.566",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Part 0: Loading Modules\n\nIn this part the modules used in Part 1-3 are loaded",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.566",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003ePart 0: Loading Modules\u003c/h2\u003e\n\u003cp\u003eIn this part the modules used in Part 1-3 are loaded\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543566_1490010529",
      "id": "20171107-082726_1604477494",
      "dateCreated": "2019-03-30 14:35:43.566",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport json\n\nfrom pyspark import SparkContext\nfrom pyspark.streaming import StreamingContext\nfrom pyspark.streaming.kafka import KafkaUtils\nfrom pyspark.sql.functions import col, udf\nfrom pyspark.sql.types import *",
      "user": "anonymous",
      "dateUpdated": "2019-04-06 13:52:42.621",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1553956543566_-1877468095",
      "id": "20171107-082732_311337148",
      "dateCreated": "2019-03-30 14:35:43.566",
      "dateStarted": "2019-04-06 13:52:42.742",
      "dateFinished": "2019-04-06 13:53:09.697",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Part 1: Streaming\n\nYour first task is to create a Kafka producer that collect all tweet about the German car brands (Audi, BMW, Mercedes, Opel, Porsche, and Volkswagen (VW)). Collect these tweets in a Kafka topic called \"cars\".\n\n\u003e Note: As you cannot do this task in Zeppelin, describe the steps you took together with the commands your ran in the %md cell below.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.566",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003ePart 1: Streaming\u003c/h2\u003e\n\u003cp\u003eYour first task is to create a Kafka producer that collect all tweet about the German car brands (Audi, BMW, Mercedes, Opel, Porsche, and Volkswagen (VW)). Collect these tweets in a Kafka topic called \u0026ldquo;cars\u0026rdquo;.\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eNote: As you cannot do this task in Zeppelin, describe the steps you took together with the commands your ran in the %md cell below.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543566_1071636585",
      "id": "20171107-110144_425032573",
      "dateCreated": "2019-03-30 14:35:43.566",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Commands",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.567",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eCommands\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543567_-369685969",
      "id": "20171107-110542_375204454",
      "dateCreated": "2019-03-30 14:35:43.567",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Part 2: Spark Streaming\nIn class you have seen how to consume a Kafka topic using Spark Streaming and add a sentiment to the tweets. In this part, we are going to do exactly the same. Of course some additional transformations are wanted.\n\n* 2a) Define general RDD helper functions\n* 2b) Sentiment analysis: Create helper lists and define 7 sentiment analysis functions\n* 2c) Brand function\n* 2d) Combine all helper functions in DFActions function\n* 2e) Specifying arguments and parameters\n* 2f) Initialize the StreamingContext (ssc)\n* 2g) Initializing of the stream and creation of the execution plan\n* 2h) Start the stream",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.567",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003ePart 2: Spark Streaming\u003c/h2\u003e\n\u003cp\u003eIn class you have seen how to consume a Kafka topic using Spark Streaming and add a sentiment to the tweets. In this part, we are going to do exactly the same. Of course some additional transformations are wanted.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e2a) Define general RDD helper functions\u003c/li\u003e\n  \u003cli\u003e2b) Sentiment analysis: Create helper lists and define 7 sentiment analysis functions\u003c/li\u003e\n  \u003cli\u003e2c) Brand function\u003c/li\u003e\n  \u003cli\u003e2d) Combine all helper functions in DFActions function\u003c/li\u003e\n  \u003cli\u003e2e) Specifying arguments and parameters\u003c/li\u003e\n  \u003cli\u003e2f) Initialize the StreamingContext (ssc)\u003c/li\u003e\n  \u003cli\u003e2g) Initializing of the stream and creation of the execution plan\u003c/li\u003e\n  \u003cli\u003e2h) Start the stream\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543567_-53753808",
      "id": "20171107-110549_1712093619",
      "dateCreated": "2019-03-30 14:35:43.567",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 2a) Define general RDD helper functions\n\nThe `selectFields()` and `makeSchema()` function need to be defined. These functions will help to transform the RDDs.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.568",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e2a) Define general RDD helper functions\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eselectFields()\u003c/code\u003e and \u003ccode\u003emakeSchema()\u003c/code\u003e function need to be defined. These functions will help to transform the RDDs.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543567_-58247880",
      "id": "20171107-110904_1047191491",
      "dateCreated": "2019-03-30 14:35:43.567",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n# define selectFields()\n\u003cFILL IN\u003e\n\n# define makeSchema\n\u003cFILL IN\u003e",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.568",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1553956543568_350040022",
      "id": "20171107-121341_44862451",
      "dateCreated": "2019-03-30 14:35:43.568",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 2b) Sentiment analysis: Create helper lists and define 7 sentiment analysis functions\n\nAs done in class, the same **postive** and **negative** helper list need to be created to use later in application.\n\nIn class we saw how to define a general `sentimentAnalysis()` function. Here we are going to repeat this sentiment analysis function, but are ging to create 6 additional sentimentAnalysis functions. One for for each car brand. The functions return the semintiment towards the brand if the brand name is included in the text of the tweet, otherwise None. This will create for example a function called `SentimentAnalysisAudi()`. Make sure to transform them to UDF, so you can use them on dataframes in the streaming context.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.568",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e2b) Sentiment analysis: Create helper lists and define 7 sentiment analysis functions\u003c/h3\u003e\n\u003cp\u003eAs done in class, the same \u003cstrong\u003epostive\u003c/strong\u003e and \u003cstrong\u003enegative\u003c/strong\u003e helper list need to be created to use later in application.\u003c/p\u003e\n\u003cp\u003eIn class we saw how to define a general \u003ccode\u003esentimentAnalysis()\u003c/code\u003e function. Here we are going to repeat this sentiment analysis function, but are ging to create 6 additional sentimentAnalysis functions. One for for each car brand. The functions return the semintiment towards the brand if the brand name is included in the text of the tweet, otherwise None. This will create for example a function called \u003ccode\u003eSentimentAnalysisAudi()\u003c/code\u003e. Make sure to transform them to UDF, so you can use them on dataframes in the streaming context.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543568_-1689946336",
      "id": "20171107-121544_1149344387",
      "dateCreated": "2019-03-30 14:35:43.568",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# Create helper lists\npositive \u003d \u003cFILL IN\u003e\nnegative \u003cFILL IN\u003e\n\nprint(len(positive))\nprint(len(negative))",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.568",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eCreate helper lists\u003c/h1\u003e\n\u003cp\u003e#positive \u003d \u003cFILL IN\u003e\u003c/p\u003e\n\u003cp\u003e#negative \u003cFILL IN\u003e\u003cbr/\u003epositive \u003d [x[\u0026quot;_c0\u0026ldquo;] for x in spark.read.csv(\u0026rdquo;file:///home/bigdata/streaming/data/input/positive-words.txt\u0026quot;).collect()]\u003cbr/\u003enegative \u003d [x[\u0026quot;_c0\u0026ldquo;] for x in spark.read.csv(\u0026rdquo;file:///home/bigdata/streaming/data/input/negative-words.txt\u0026quot;).collect()]\u003cbr/\u003eprint(len(positive))\u003cbr/\u003eprint(len(negative))\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543568_508591801",
      "id": "20171107-125300_375493017",
      "dateCreated": "2019-03-30 14:35:43.568",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# Create SentimentAnalysis Fucntion\n\u003cFILL IN\u003e\n\n# Create SentimentAnalysis Fucntion for Audi\n\u003cFILL IN\u003e\n\n# Create SentimentAnalysis Fucntion for BMW\n\u003cFILL IN\u003e\n\n# Create SentimentAnalysis Fucntion for Mercedes\n\u003cFILL IN\u003e\n\n# Create SentimentAnalysis Fucntion for Opel\n\u003cFILL IN\u003e\n\n# Create SentimentAnalysis Fucntion Porsche\n\u003cFILL IN\u003e\n\n# Create SentimentAnalysis Fucntion Volkswagen / VW\n\u003cFILL IN\u003e",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.569",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1553956543569_1321494847",
      "id": "20171107-122111_38678556",
      "dateCreated": "2019-03-30 14:35:43.569",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 2c) Brand function\n\nA final helper function is the `brand()`function. This function extracts the brand from text and creates a column **brand** containing the name of the brand in lower case string.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.569",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e2c) Brand function\u003c/h3\u003e\n\u003cp\u003eA final helper function is the \u003ccode\u003ebrand()\u003c/code\u003efunction. This function extracts the brand from text and creates a column \u003cstrong\u003ebrand\u003c/strong\u003e containing the name of the brand in lower case string.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543569_2090707902",
      "id": "20171107-123250_1714831889",
      "dateCreated": "2019-03-30 14:35:43.569",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ndef brand(text):\n    \u003cFILL IN\u003e\n\nudfBrand \u003d \u003cFILL IN\u003e",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.570",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1553956543569_237336151",
      "id": "20171107-123659_2081287618",
      "dateCreated": "2019-03-30 14:35:43.569",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 2d) Combine all helper functions in DFActions function\n\nAs done in class, a `DFActions()`should be defined that transforms the RDD to DF and executes all functions defined in 2b and 2c.\n\nAdditionally, you already need to prepare for part 3 and save the DF to be able to use it in ElasticSearch in the third part of this assignment. There are two options:\n1) Write the DF directly to **ElasticSearch**, more specific to /cars_twitter/default (/index/type).\n2) If your are not able to execute option 1, you can write the resulting DF  to a **local JSON file** with name: \"/home/bigdata/assignment/data/output/cars_twitter\".\n\n\u003e Note: We want to collect all the tweets, so use the **append** mode. In this way new run will be append to the same JSON file",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.570",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e2d) Combine all helper functions in DFActions function\u003c/h3\u003e\n\u003cp\u003eAs done in class, a \u003ccode\u003eDFActions()\u003c/code\u003eshould be defined that transforms the RDD to DF and executes all functions defined in 2b and 2c.\u003c/p\u003e\n\u003cp\u003eAdditionally, you already need to prepare for part 3 and save the DF to be able to use it in ElasticSearch in the third part of this assignment. There are two options:\u003cbr/\u003e1) Write the DF directly to \u003cstrong\u003eElasticSearch\u003c/strong\u003e, more specific to /cars_twitter/default (/index/type).\u003cbr/\u003e2) If your are not able to execute option 1, you can write the resulting DF to a \u003cstrong\u003elocal JSON file\u003c/strong\u003e with name: \u0026ldquo;/home/bigdata/assignment/data/output/cars_twitter\u0026rdquo;.\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eNote: We want to collect all the tweets, so use the \u003cstrong\u003eappend\u003c/strong\u003e mode. In this way new run will be append to the same JSON file\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543570_-2051807729",
      "id": "20171107-125045_1898757169",
      "dateCreated": "2019-03-30 14:35:43.570",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ndef DFActions(rdd):\n    # transform RDD to DF\n    DF \u003d  \u003cFILL IN\u003e\n    \n    # apply functions in 2b and 2c\n    DfSentiment \u003d \u003cFILL IN\u003e\n    \n    # Write resulting df to ElasticSearch or local JSON file\n    \n    \u003cFILL IN\u003e\n    \n    # Show the 5 first columns and print the number tweets read during the last run\n    \u003cFILL IN\u003e\n    \n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.571",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1553956543570_1228760884",
      "id": "20171107-125641_2004308809",
      "dateCreated": "2019-03-30 14:35:43.570",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 2e) Specifying arguments and parameters\n\nThe helper functions take arguments as input. In the cell below, the **fields** argument for the **selectFields** and **makeSchema** function is defined. Additionally we define to which topic Spark should listen, the interval Spark Streaming should run and finally the location of Zookeeper.\n\nHere we want to retain the \"id\", \"created_at\", \"text\", \"user.location\", \"entities.hashtags\", \"entities.user_mentions\", \"lang\", and \"timestamp_ms\" fields.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.571",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e2e) Specifying arguments and parameters\u003c/h3\u003e\n\u003cp\u003eThe helper functions take arguments as input. In the cell below, the \u003cstrong\u003efields\u003c/strong\u003e argument for the \u003cstrong\u003eselectFields\u003c/strong\u003e and \u003cstrong\u003emakeSchema\u003c/strong\u003e function is defined. Additionally we define to which topic Spark should listen, the interval Spark Streaming should run and finally the location of Zookeeper.\u003c/p\u003e\n\u003cp\u003eHere we want to retain the \u0026ldquo;id\u0026rdquo;, \u0026ldquo;created_at\u0026rdquo;, \u0026ldquo;text\u0026rdquo;, \u0026ldquo;user.location\u0026rdquo;, \u0026ldquo;entities.hashtags\u0026rdquo;, \u0026ldquo;entities.user_mentions\u0026rdquo;, \u0026ldquo;lang\u0026rdquo;, and \u0026ldquo;timestamp_ms\u0026rdquo; fields.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543571_-774402554",
      "id": "20171107-132959_229994861",
      "dateCreated": "2019-03-30 14:35:43.571",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nfields \u003d \u003cFILL IN\u003e",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.571",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1553956543571_2145355032",
      "id": "20171107-133041_342633679",
      "dateCreated": "2019-03-30 14:35:43.571",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nzkQuorum \u003d \u003cFILL IN\u003e\ntopic \u003d \u003cFILL IN\u003e\n\nseconds_to_run \u003d \u003cFILL IN\u003e",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.572",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "python"
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1553956543572_1156659362",
      "id": "20171107-133428_389331652",
      "dateCreated": "2019-03-30 14:35:43.572",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 2f) Initialize the StreamingContext (ssc)\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.572",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e2f) Initialize the StreamingContext (ssc)\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543572_-49415876",
      "id": "20171107-133452_1005759701",
      "dateCreated": "2019-03-30 14:35:43.572",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\u003cFILL IN\u003e",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.573",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1553956543572_1259726538",
      "id": "20171107-133531_175495022",
      "dateCreated": "2019-03-30 14:35:43.572",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 2g) Initializing of the stream and creation of the  execution plan",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.573",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e2g) Initializing of the stream and creation of the execution plan\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543573_248098628",
      "id": "20171107-133700_685085197",
      "dateCreated": "2019-03-30 14:35:43.573",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# initialization of the Stream\n\u003cFILL IN\u003e\n\n# string to directory\n\u003cFILL IN\u003e\n\n# select the necessary fields\n\u003cFILL IN\u003e\n\n# define schema\n\u003cFILL IN\u003e\n\n# transform to DF and perform the DFActions\n\u003cFILL IN\u003e",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.573",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1553956543573_-1318371953",
      "id": "20171107-133727_1269006101",
      "dateCreated": "2019-03-30 14:35:43.573",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 2h) Start the stream\n\nLet this stream run for about 20 minutes to collect enough tweets about the German cars",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.574",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e2h) Start the stream\u003c/h3\u003e\n\u003cp\u003eLet this stream run for about 20 minutes to collect enough tweets about the German cars\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543574_977988017",
      "id": "20171107-133755_1027667664",
      "dateCreated": "2019-03-30 14:35:43.574",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\u003cFILL IN\u003e",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.575",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003cFILL IN\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543574_790847659",
      "id": "20171107-134055_202904765",
      "dateCreated": "2019-03-30 14:35:43.574",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Part 3: ElasticSearch\n\nIn part 2 we have performed streaming sentiment analysis. The Belgian dealer is pleased to see the results. Nevertheless he wants to go a step further. He wants to create a search engines:\n1) A search engine on his website to search for cars\n2) An internal search engine in which he can search the tweets for German cars\n\nThe car dealer wants to be convinced of the power of ElasticSearch and askes you to run 15 queries. Are you able to construct these queries?",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.575",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003ePart 3: ElasticSearch\u003c/h2\u003e\n\u003cp\u003eIn part 2 we have performed streaming sentiment analysis. The Belgian dealer is pleased to see the results. Nevertheless he wants to go a step further. He wants to create a search engines:\u003cbr/\u003e1) A search engine on his website to search for cars\u003cbr/\u003e2) An internal search engine in which he can search the tweets for German cars\u003c/p\u003e\n\u003cp\u003eThe car dealer wants to be convinced of the power of ElasticSearch and askes you to run 15 queries. Are you able to construct these queries?\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543575_-63319646",
      "id": "20171107-135630_514010259",
      "dateCreated": "2019-03-30 14:35:43.575",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### 3a) Indexes\n\nThere are already two indexes (with types) available in ElasticSearch:\n* **/cars/cars_db**: An index/type containing the cars for sale on the Belgian market. This index is the result of the individual assignment.\n* **cars_twitter/tweets**: An index/type containing tweets about German cars. This index is the result of part 2 in this assignment.\n\nYou first job is to look at the mappings. Can you answer the following questions:\n* What type is the field **age** in the /cars/cars_db index?\n* What type is the field **brandName** in the /cars/cars_db index?\n* What does the following key-value pair mean?\n            **\"fields\": { \"keyword\": { \"type\": \"keyword\"}}**\n* What does **\"ignore_above: 256\"** mean?\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.575",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003e3a) Indexes\u003c/h3\u003e\n\u003cp\u003eThere are already two indexes (with types) available in ElasticSearch:\u003cbr/\u003e* \u003cstrong\u003e/cars/cars_db\u003c/strong\u003e: An index/type containing the cars for sale on the Belgian market. This index is the result of the individual assignment.\u003cbr/\u003e* \u003cstrong\u003ecars_twitter/tweets\u003c/strong\u003e: An index/type containing tweets about German cars. This index is the result of part 2 in this assignment.\u003c/p\u003e\n\u003cp\u003eYou first job is to look at the mappings. Can you answer the following questions:\u003cbr/\u003e* What type is the field \u003cstrong\u003eage\u003c/strong\u003e in the /cars/cars_db index?\u003cbr/\u003e* What type is the field \u003cstrong\u003ebrandName\u003c/strong\u003e in the /cars/cars_db index?\u003cbr/\u003e* What does the following key-value pair mean?\u003cbr/\u003e \u003cstrong\u003e\u0026ldquo;fields\u0026rdquo;: { \u0026ldquo;keyword\u0026rdquo;: { \u0026ldquo;type\u0026rdquo;: \u0026ldquo;keyword\u0026rdquo;}}\u003c/strong\u003e\u003cbr/\u003e* What does \u003cstrong\u003e\u0026ldquo;ignore_above: 256\u0026rdquo;\u003c/strong\u003e mean?\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543575_1282017674",
      "id": "20171107-144651_854367381",
      "dateCreated": "2019-03-30 14:35:43.575",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Answer",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.576",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eAnswer\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543576_-416852842",
      "id": "20171111-153715_1002693180",
      "dateCreated": "2019-03-30 14:35:43.576",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 3b) Searching\n\nIn this part, you need to perform queries in ElasticSearch (Kibana). Each query needs to be pasted into the %elasticsearch cell. In the %md cell \"Hits\" the number of hits should be entered. Finally, if an additional qestion is asked, you should answer in the %md cell with \"Answer\".\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.576",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e3b) Searching\u003c/h2\u003e\n\u003cp\u003eIn this part, you need to perform queries in ElasticSearch (Kibana). Each query needs to be pasted into the %elasticsearch cell. In the %md cell \u0026ldquo;Hits\u0026rdquo; the number of hits should be entered. Finally, if an additional qestion is asked, you should answer in the %md cell with \u0026ldquo;Answer\u0026rdquo;.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543576_229132768",
      "id": "20171107-124858_745007361",
      "dateCreated": "2019-03-30 14:35:43.576",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 1 (Example):\nCreate a query that returns all the documents in the cars_twitter/tweets index.\nWas this easy?",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.576",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 1 (Example):\u003c/h3\u003e\n\u003cp\u003eCreate a query that returns all the documents in the cars_twitter/tweets index.\u003cbr/\u003eWas this easy?\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543576_221262246",
      "id": "20171107-200251_1407364008",
      "dateCreated": "2019-03-30 14:35:43.576",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\nGET /cars_twitter/tweets/_search\n{\n  \"query\": {\n    \"match_all\": {}\n  }\n}",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.576",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543576_1025851622",
      "id": "20171107-200324_2073809367",
      "dateCreated": "2019-03-30 14:35:43.576",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n6538",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.576",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003cp\u003e6538\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543576_1779655176",
      "id": "20171107-200436_1720905555",
      "dateCreated": "2019-03-30 14:35:43.576",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Answer\nYes, this was easy",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.577",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eAnswer\u003c/h4\u003e\n\u003cp\u003eYes, this was easy\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543577_1914614410",
      "id": "20171107-200518_979802783",
      "dateCreated": "2019-03-30 14:35:43.577",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 2:\nCreate a query that return all the **oldtimers** in the **cars/cars_db** index.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.577",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 2:\u003c/h3\u003e\n\u003cp\u003eCreate a query that return all the \u003cstrong\u003eoldtimers\u003c/strong\u003e in the \u003cstrong\u003ecars/cars_db\u003c/strong\u003e index.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543577_-11595071",
      "id": "20171107-200605_65802545",
      "dateCreated": "2019-03-30 14:35:43.577",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.577",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543577_-815709756",
      "id": "20171107-200602_1857739100",
      "dateCreated": "2019-03-30 14:35:43.577",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.577",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543577_133035863",
      "id": "20171107-200600_722859155",
      "dateCreated": "2019-03-30 14:35:43.577",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 3:\nFind all the German cars in the cars/cars_bd index.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.577",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 3:\u003c/h3\u003e\n\u003cp\u003eFind all the German cars in the cars/cars_bd index.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543577_-1600806636",
      "id": "20171107-203651_201021837",
      "dateCreated": "2019-03-30 14:35:43.577",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticSearch",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.578",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543577_805246164",
      "id": "20171107-175944_1938006390",
      "dateCreated": "2019-03-30 14:35:43.577",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.578",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543578_912564710",
      "id": "20171107-203747_2034577850",
      "dateCreated": "2019-03-30 14:35:43.578",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 4:\n\nReturn all the cars with a **price** between 20000 and 30000.\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.578",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 4:\u003c/h3\u003e\n\u003cp\u003eReturn all the cars with a \u003cstrong\u003eprice\u003c/strong\u003e between 20000 and 30000.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543578_-546692705",
      "id": "20171107-144947_1233466800",
      "dateCreated": "2019-03-30 14:35:43.578",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.578",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543578_749275026",
      "id": "20171107-203858_1909677953",
      "dateCreated": "2019-03-30 14:35:43.578",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.578",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543578_1701364467",
      "id": "20171107-203945_1147055733",
      "dateCreated": "2019-03-30 14:35:43.578",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 5:\n\nReturn the models of which the name only consist of numbers. (Hint: **regexp** query)",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.579",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 5:\u003c/h3\u003e\n\u003cp\u003eReturn the models of which the name only consist of numbers. (Hint: \u003cstrong\u003eregexp\u003c/strong\u003e query)\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543578_1708204115",
      "id": "20171107-204010_2005564903",
      "dateCreated": "2019-03-30 14:35:43.578",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.579",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543579_-548173051",
      "id": "20171107-204401_558877299",
      "dateCreated": "2019-03-30 14:35:43.579",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.579",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543579_1852559769",
      "id": "20171107-204430_998765198",
      "dateCreated": "2019-03-30 14:35:43.579",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 6:\nReturn the tweets that have a **brand** field that is not null.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.579",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 6:\u003c/h3\u003e\n\u003cp\u003eReturn the tweets that have a \u003cstrong\u003ebrand\u003c/strong\u003e field that is not null.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543579_887685386",
      "id": "20171107-204457_1084830247",
      "dateCreated": "2019-03-30 14:35:43.579",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.580",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543579_-225360709",
      "id": "20171107-204552_1387313909",
      "dateCreated": "2019-03-30 14:35:43.579",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.580",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543580_651787911",
      "id": "20171107-204614_1036408860",
      "dateCreated": "2019-03-30 14:35:43.580",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 7:\n\nReturn the tweets that contain **Mercedes** (case insensitive) in their text body.\n\nHow come the car with id \"AV-XehVbcAXvn561YE47\" is include in the results, while no brand field is present for this car?",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.580",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 7:\u003c/h3\u003e\n\u003cp\u003eReturn the tweets that contain \u003cstrong\u003eMercedes\u003c/strong\u003e (case insensitive) in their text body.\u003c/p\u003e\n\u003cp\u003eHow come the car with id \u0026ldquo;AV-XehVbcAXvn561YE47\u0026rdquo; is include in the results, while no brand field is present for this car?\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543580_-761321092",
      "id": "20171107-204658_1071340092",
      "dateCreated": "2019-03-30 14:35:43.580",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.581",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543580_1199314302",
      "id": "20171107-204751_803372132",
      "dateCreated": "2019-03-30 14:35:43.580",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.581",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543581_1268057866",
      "id": "20171107-204819_243058549",
      "dateCreated": "2019-03-30 14:35:43.581",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Answer\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.581",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eAnswer\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543581_-86345198",
      "id": "20171107-205006_338598437",
      "dateCreated": "2019-03-30 14:35:43.581",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 8:\n\nReturn the tweets that have **audi** (case insensitive) in their **hashtags** or **mentions**",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.582",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 8:\u003c/h3\u003e\n\u003cp\u003eReturn the tweets that have \u003cstrong\u003eaudi\u003c/strong\u003e (case insensitive) in their \u003cstrong\u003ehashtags\u003c/strong\u003e or \u003cstrong\u003ementions\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543581_-1920107119",
      "id": "20171107-205052_867061780",
      "dateCreated": "2019-03-30 14:35:43.582",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.582",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543582_-1306254049",
      "id": "20171107-205054_816770858",
      "dateCreated": "2019-03-30 14:35:43.582",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.582",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543582_-1203596384",
      "id": "20171107-205710_558949698",
      "dateCreated": "2019-03-30 14:35:43.582",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 9:\n\nCreate a query that returns the tweets with the exact phrase **\"sports car\"** (case insensitive) in their text.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.583",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 9:\u003c/h3\u003e\n\u003cp\u003eCreate a query that returns the tweets with the exact phrase \u003cstrong\u003e\u0026ldquo;sports car\u0026rdquo;\u003c/strong\u003e (case insensitive) in their text.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543582_-1578145357",
      "id": "20171107-205734_354187765",
      "dateCreated": "2019-03-30 14:35:43.582",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.583",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543583_-1059901283",
      "id": "20171107-205914_2078597174",
      "dateCreated": "2019-03-30 14:35:43.583",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.583",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543583_1065858424",
      "id": "20171107-205926_875775641",
      "dateCreated": "2019-03-30 14:35:43.583",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 10:\nReturn the tweets with **BMW** in their body that have a **positive sentiment**.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.584",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 10:\u003c/h3\u003e\n\u003cp\u003eReturn the tweets with \u003cstrong\u003eBMW\u003c/strong\u003e in their body that have a \u003cstrong\u003epositive sentiment\u003c/strong\u003e.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543583_1364595646",
      "id": "20171107-205951_781429318",
      "dateCreated": "2019-03-30 14:35:43.583",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.584",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543584_1151095693",
      "id": "20171107-210054_782746589",
      "dateCreated": "2019-03-30 14:35:43.584",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.584",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543584_52414503",
      "id": "20171107-210107_1905192816",
      "dateCreated": "2019-03-30 14:35:43.584",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 11:\nIn ElasticSearch you can accomplish the same result with multiple queries. Can you create a query that returns the same results as question 10, while another query is executed?\n\nWhat is the difference in reasoning between the query you executed in question 10 and 11?",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.585",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 11:\u003c/h3\u003e\n\u003cp\u003eIn ElasticSearch you can accomplish the same result with multiple queries. Can you create a query that returns the same results as question 10, while another query is executed?\u003c/p\u003e\n\u003cp\u003eWhat is the difference in reasoning between the query you executed in question 10 and 11?\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543584_1228217473",
      "id": "20171107-210221_1017706915",
      "dateCreated": "2019-03-30 14:35:43.584",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticSearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.585",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/text",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543585_2133116349",
      "id": "20171107-210359_514680964",
      "dateCreated": "2019-03-30 14:35:43.585",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.585",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "title": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543585_323839338",
      "id": "20171107-210416_1638265688",
      "dateCreated": "2019-03-30 14:35:43.585",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Answer",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.585",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eAnswer\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543585_-385487075",
      "id": "20171107-210507_1981856283",
      "dateCreated": "2019-03-30 14:35:43.585",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 12\nReturn tweets that contain **Audi** that do **not** have a **positive sentiment**. Give priority to tweets that contain **R8** without excluding other tweets.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.586",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 12\u003c/h3\u003e\n\u003cp\u003eReturn tweets that contain \u003cstrong\u003eAudi\u003c/strong\u003e that do \u003cstrong\u003enot\u003c/strong\u003e have a \u003cstrong\u003epositive sentiment\u003c/strong\u003e. Give priority to tweets that contain \u003cstrong\u003eR8\u003c/strong\u003e without excluding other tweets.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543585_-179434695",
      "id": "20171111-155430_390444965",
      "dateCreated": "2019-03-30 14:35:43.585",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.586",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543586_1238772918",
      "id": "20171111-155727_857658530",
      "dateCreated": "2019-03-30 14:35:43.586",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.586",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543586_1248638322",
      "id": "20171111-155726_683725790",
      "dateCreated": "2019-03-30 14:35:43.586",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 13\nSimilarly to question 12, find tweets about **Audi**, tweeted from **Singapore**, and have **no negative sentiment**. Give priority to tweets that contain **R8** without excluding other tweets.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.586",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 13\u003c/h3\u003e\n\u003cp\u003eSimilarly to question 12, find tweets about \u003cstrong\u003eAudi\u003c/strong\u003e, tweeted from \u003cstrong\u003eSingapore\u003c/strong\u003e, and have \u003cstrong\u003eno negative sentiment\u003c/strong\u003e. Give priority to tweets that contain \u003cstrong\u003eR8\u003c/strong\u003e without excluding other tweets.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543586_1358806000",
      "id": "20171111-155724_1600937479",
      "dateCreated": "2019-03-30 14:35:43.586",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.586",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543586_-1744261894",
      "id": "20171111-155824_242782188",
      "dateCreated": "2019-03-30 14:35:43.586",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.587",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543586_-1475553302",
      "id": "20171111-155721_2141224113",
      "dateCreated": "2019-03-30 14:35:43.586",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 14\nCreate a query that returns the **young German cars** that do **not** have a **mileage higher or equal to 10000 km**. Give priority to powerful cars with an **engine power greater or equal to 150 kW** without excluding other results.\nNote that we want to use this result on the webpage. We only want to show **3 variabels: \"brandName\", \"modelName\", and \"sellingPrice\"**. Additionally we want to use pagination and show only the second page showing results **10 - 20**.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.587",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 14\u003c/h3\u003e\n\u003cp\u003eCreate a query that returns the \u003cstrong\u003eyoung German cars\u003c/strong\u003e that do \u003cstrong\u003enot\u003c/strong\u003e have a \u003cstrong\u003emileage higher or equal to 10000 km\u003c/strong\u003e. Give priority to powerful cars with an \u003cstrong\u003eengine power greater or equal to 150 kW\u003c/strong\u003e without excluding other results.\u003cbr/\u003eNote that we want to use this result on the webpage. We only want to show \u003cstrong\u003e3 variabels: \u0026ldquo;brandName\u0026rdquo;, \u0026ldquo;modelName\u0026rdquo;, and \u0026ldquo;sellingPrice\u0026rdquo;\u003c/strong\u003e. Additionally we want to use pagination and show only the second page showing results \u003cstrong\u003e10 - 20\u003c/strong\u003e.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543587_835828929",
      "id": "20171111-160052_1329510597",
      "dateCreated": "2019-03-30 14:35:43.587",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.587",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543587_-1903283573",
      "id": "20171111-160124_1648684746",
      "dateCreated": "2019-03-30 14:35:43.587",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.587",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543587_-1572105679",
      "id": "20171111-160648_870357630",
      "dateCreated": "2019-03-30 14:35:43.587",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Question 15\nFinally you should run a query that returns the tweets having **english** as language and contain the phrase **Porche Boxster**. Note that the words \"Porsche\" and \"Boxster\" should be close to each other and **maximum 1 word** can be in between the two words. Additionally the tweets may **NOT** have a **negative sentiment**. For esthetic reasons, the searched terms (Porsche Boxster) should be **highlighted** in bold.",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.587",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eQuestion 15\u003c/h3\u003e\n\u003cp\u003eFinally you should run a query that returns the tweets having \u003cstrong\u003eenglish\u003c/strong\u003e as language and contain the phrase \u003cstrong\u003ePorche Boxster\u003c/strong\u003e. Note that the words \u0026ldquo;Porsche\u0026rdquo; and \u0026ldquo;Boxster\u0026rdquo; should be close to each other and \u003cstrong\u003emaximum 1 word\u003c/strong\u003e can be in between the two words. Additionally the tweets may \u003cstrong\u003eNOT\u003c/strong\u003e have a \u003cstrong\u003enegative sentiment\u003c/strong\u003e. For esthetic reasons, the searched terms (Porsche Boxster) should be \u003cstrong\u003ehighlighted\u003c/strong\u003e in bold.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543587_-17268499",
      "id": "20171111-161320_279276607",
      "dateCreated": "2019-03-30 14:35:43.587",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%elasticsearch\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.588",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543588_1497283974",
      "id": "20171107-150135_868457103",
      "dateCreated": "2019-03-30 14:35:43.588",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Hits\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.588",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eHits\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543588_1086140388",
      "id": "20171111-155649_559254049",
      "dateCreated": "2019-03-30 14:35:43.588",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003cimg src\u003d\"https://i.ytimg.com/vi/P4LhWSN3YSw/maxresdefault.jpg\" /\u003e\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.588",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cimg src\u003d\"https://i.ytimg.com/vi/P4LhWSN3YSw/maxresdefault.jpg\" /\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1553956543588_1942835845",
      "id": "20171111-161818_2119063460",
      "dateCreated": "2019-03-30 14:35:43.588",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2019-03-30 14:35:43.589",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1553956543589_1253672556",
      "id": "20171111-162206_819307001",
      "dateCreated": "2019-03-30 14:35:43.589",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Assignment/Group Assignment",
  "id": "2E71XHBK7",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}